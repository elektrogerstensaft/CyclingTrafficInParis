# Info method and percentage of NaN (to add before any transformation on cycling traffic and weather dataset)
df.info()
percent_missing = df.isnull().sum() * 100 / len(df)


# Replacing in final DF Cycling + weather -0.1mm precipitation with 0.00 (as cannot exist)
df['Rain_last3H']. unique()
df['Rain_last3H'].replace(-0.1, 0, inplace=True)

# Min/ Max on temperatures + precipitation
df['Temp_°C'].min()
df['Temp_°C'].max()
df = df[df['Temp_°C'] >= 35]
df = df[df['Temp_°C'] <= -6]

df['Rain_last3H'].min()
df['Rain_last3H'].max()

df = df[df['Rain_last3H'] == 0]
df = df[df['Rain_last3H'] == 14.9]


# Calculating correlation coefficient between 

np.corrcoef(df['Temp_°C'], df['Hourly count'])
np.corrcoef(df['Rain_last3H'], df['Hourly count'])


# Satistical tests on weather

1)	Temp and hourly count

from scipy.stats import pearsonr
pearsonr(x = df["Temp_°C"], y = df["Hourly count"]) 

print("p-value: ", pearsonr(x = df["Temp_°C"], y = df["Hourly count"])[1])
print("coefficient: ", pearsonr(x = df["Temp_°C"], y = df["Hourly count"])[0])

2)	precipitations and hourly count

from scipy.stats import pearsonr
pearsonr(x = df["Rain_last3H"], y = df["Hourly count"]) 

print("p-value: ", pearsonr(x = df["Rain_last3H"], y = df["Hourly count"])[1])
print("coefficient: ", pearsonr(x = df["Rain_last3H"], y = df["Hourly count"])[0])



# Impact of temp and precipitations on average hourly count

# Impact of temperatures < 5°C and viz
Temp = [] 

for row in df['Temp_°C']: 
    if row < 5 : Temp.append('< 5°C') 
    else: Temp.append('> 5°C') 


df['Temp'] = Temp 
df.head()


df.groupby('Temp', as_index=False)['Hourly count'].mean()

plt.rcParams["figure.figsize"] = (4, 5)
ax = sns.barplot(x = 'Temp', y = 'Hourly count', data = df, errorbar=('ci', False))
ax.bar_label(ax.containers[0], label_type='edge')

plt.xlabel("Temperatures")
plt.ylabel("Average hourly count")
plt.title("Impact of temperatures on cycling traffic")

plt.show()


# Impact of temperatures > 25°C and viz
Temp2 = [] 

for row in df['Temp_°C']: 
    if row > 25: Temp2.append('> 25°C') 
    else: Temp2.append('< 25°C') 


df['Temp2'] = Temp2 
df.head()


df.groupby('Temp2', as_index=False)['Hourly count'].mean()

plt.rcParams["figure.figsize"] = (4, 5)
ax = sns.barplot(x = 'Temp2', y = 'Hourly count', data = df, errorbar=('ci', False))
ax.bar_label(ax.containers[0], label_type='edge')

plt.xlabel("Temperatures")
plt.ylabel("Average hourly count")
plt.title("Impact of temperatures on cycling traffic")

plt.show()


# Impact of precipitations and viz

df.groupby('Rain_classes', as_index=False)['Hourly count'].mean()

plt.rcParams["figure.figsize"] = (6, 6)
ax = sns.barplot(x = 'Rain_classes', y = 'Hourly count', data = df, errorbar=('ci', False))
ax.bar_label(ax.containers[0], label_type='edge')

plt.xlabel("Precipitation classes")
plt.ylabel("Average hourly count")
plt.title("Impact of precipitations on cycling traffic")

plt.show()
